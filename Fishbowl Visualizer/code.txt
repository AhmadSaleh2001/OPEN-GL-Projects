#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <math.h>
#include <GL/freeglut.h>
#include<iostream>
#include<vector>
#include<queue>
#include<stack>
#include<set>
#include<algorithm>
#include<Windows.h>
using namespace std;
vector<vector<int>>Fish;
vector<vector<double>>Bubbles;
GLubyte Colors[5][4] = {
	{3 , 123 , 211},
	{122 , 223 , 55},
	{254 , 48 , 24},
	{28 , 234 , 251},
	{157 , 121 , 132},
};
int Timer = 0;

void Init()
{
	glClearColor(0.4, 0.7, 1, 0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glViewport(0, 0, 800, 500);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	gluOrtho2D(0, 800, 0, 500);

	glMatrixMode(GL_MODELVIEW);



}


void DrawFishRight(vector<int>& V)
{

	glPushMatrix();
	glBegin(GL_TRIANGLES);		// Draw Head

	glColor3ub(255, 174, 201);
	glVertex2i(V[0], V[1]);


	glColor3ub(255, 0, 0);
	glVertex2i(V[0] + 50, V[1] + 50);
	glVertex2i(V[0] + 50, V[1] - 50);
	glEnd();



	glBegin(GL_TRIANGLES);	 // Draw Tail
	glColor3ubv(Colors[V[3]]);
	glVertex2i(V[0] + 50, V[1]);
	glVertex2i(V[0] + 70, V[1] + 30);
	glVertex2i(V[0] + 70, V[1] - 30);
	glEnd();


	glPointSize(5);

	glBegin(GL_POINTS);
	glVertex2i(V[0] + 15, V[1] + 5);
	glEnd();

	glPopMatrix();

}

void DrawFishLeft(vector<int>& V)
{

	glPushMatrix();
	glBegin(GL_TRIANGLES);		// Draw Head


	glColor3ub(255, 174, 201);
	glVertex2i(V[0], V[1]);


	glColor3ub(255, 0, 0);
	glVertex2i(V[0] - 50, V[1] - 50);
	glVertex2i(V[0] - 50, V[1] + 50);
	glEnd();



	glBegin(GL_TRIANGLES);	 // Draw Tail
	glColor3ub(255, 255, 0);
	glVertex2i(V[0] - 50, V[1]);



	glVertex2i(V[0] - 70, V[1] - 30);
	glVertex2i(V[0] - 70, V[1] + 30);
	glEnd();



	glPointSize(5);
	glBegin(GL_POINTS);
	glColor3ub(0, 0, 0);
	glVertex2i(V[0] - 15, V[1] + 5);
	glEnd();

	glPopMatrix();

}



void DrawBubble(vector<double>V)
{
	glPushMatrix();
	glColor3ub(255, 255, 255);
	glPointSize(1);
	glBegin(GL_POINTS);

	for (int i = 0; i < 360; i++)
	{
		double Theta = i * 3.142 / 180;
		glVertex2f(V[0] + 20 * (V[2] / 10.0) * cos(Theta), V[1] + 20 * (V[2] / 10.0) * sin(Theta));
	}
	glEnd();
	glPopMatrix();
}


void DrawGrass()
{
	glPushMatrix();
	glColor3ub(0, 255, 0);

	int X = 1;
	while (X < 800)
	{
		glBegin(GL_LINES);
		glVertex2d(X, 0);
		glVertex2d(X, 70);
		glEnd();

		X += 5;
	}
	glPopMatrix();
}

void Draw()
{
	glClearColor(0.4, 0.7, 1, 0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();




	Timer++;
	if (Timer == 50)
	{
		for (vector<int>& V : Fish)
		{
			V[0] -= V[2] * 10;
			if (V[2] == 1 && V[0] + 70 <= 0)V[2] = -1;
			if (V[2] == -1 && V[0] - 70 >= 800)V[2] = 1;

			V[3] = rand() % 5;
			//if (V[0] + 70 <= 0)V[2] = -1;
		}

		for (vector<double>& V : Bubbles)
		{
			V[1] += 3;
			if (V[1] > 700)V[1] = 30;
		}
		Timer = 0;
	}


	for (vector<double>& X : Bubbles)DrawBubble(X);

	for (vector<int>& V : Fish)
	{
		if (V[2] == 1)DrawFishRight(V);
		else DrawFishLeft(V);
	}





	DrawGrass();





	glutPostRedisplay();
	glutSwapBuffers();
	glFlush();
}




void OnReshape(int W, int H)
{

	glViewport(0, 0, W, H);
	gluPerspective(60, W / H, 1, 10);

}

void HandleMouse(int Button, int State, int X, int Y)
{
	if (Button == GLUT_LEFT_BUTTON && State == GLUT_DOWN) {

	}
	else if (Button == GLUT_RIGHT_BUTTON && State == GLUT_DOWN)
	{

	}
}
int main(int argc, char** argv)
{

	// Draw Fishes
	Fish.push_back({ 400 , 250 , 1 , 0 });
	Fish.push_back({ 700 , 100 , 1 , 1 });
	Fish.push_back({ 500 , 300 , 1 , 2 });
	Fish.push_back({ 100 , 400 , -1 , 3 });
	Fish.push_back({ 200 , 200 , -1  , 4 });



	// Draw Left And Right Bubbles
	for (int i = 1; i <= 5; i++)
	{
		Bubbles.push_back({ 100 , 60.0 * i , 1.0 * (rand() % 10 + 1) });
		Bubbles.push_back({ 700 , 60.0 * i , 1.0 * (rand() % 10 + 1) });
	}




	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(800, 500);
	glutInitWindowPosition(100, 100);


	int X = glutCreateWindow("Simulation Fishbowl");
	Init();
	glutDisplayFunc(Draw);

	glutReshapeFunc(OnReshape);
	glutMouseFunc(HandleMouse);



	glutMainLoop();

	return 0;
}