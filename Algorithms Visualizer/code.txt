#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <math.h>
#include <GL/freeglut.h>
#include<iostream>
#include<vector>
#include<queue>
#include<stack>
#include<set>
#include<algorithm>
#include<Windows.h>

using namespace std;



/* Start Helpers For Print */

bool StartSearch = 0;
int Arr[30][30];
int Timer = 0;
bool FoundPath = 0;
int NumberOfPoints = 0;
int Choice = 0;
bool Printed = 0;
int Possible = 0;
double GScore[30][30];
double FScore[30][30];
vector<int> Parent[30][30];

/* End Helpers For Print */

/* Start Helpers For Algorithms */

int DX[8] = { 0 , 1 , 0 , -1 , -1, 1 , 1 , -1 };
int DY[8] = { 1 , 0 , -1 , 0 , 1 , 1 , -1 , -1 };
stack<vector<int>>St;
queue<vector<int>>Q;
set<vector<int>>ForA_Star; // All , ToEnd , FromStart , X , Y
vector<int>StartPoint, EndPoint;

/* End Helpers For Algorithms */
void Init()
{
	glClearColor(0.4, 0.7, 1, 0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glViewport(0, 0, 500, 500);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	gluOrtho2D(0, 500, 0, 500);

	glMatrixMode(GL_MODELVIEW);

	glPointSize(1);

}
vector<int>GetPoint(int X, int Y)
{
	return { (X + 19) / 20, (Y + 19) / 20 };
}
GLubyte Colors[7][3] = {
	{},
	{255 , 0 , 0}, // Color Start Point
	{0 , 255 , 0}, // Color End Point
	{0 , 0 , 255}, // Color The Path
	{0 , 0 , 0}, // Color Wall
	{255, 255 , 0}, // Color For Visited
	{244 , 4 , 244}, // Answer Path

};
/* Start General Print */


void GetChoices()
{
	cout << "1 - DFS\n2 - BFS\n3 - A*\n4 - Exit\n\n";
}

void InitFirstSmallPoint()
{
	/* Init First Small Point*/
	glBegin(GL_POINTS);
	glColor3ubv(Colors[0]);
	glVertex2i(-10, 0);
	glEnd();

}

void PrintPath(int X, int Y, bool First = 1)
{
	if (Parent[X][Y][0] == X && Parent[X][Y][1] == Y)return;
	PrintPath(Parent[X][Y][0], Parent[X][Y][1], 0);
	if (!First)Arr[X][Y] = 6;
}

bool ValidGrid(vector<int>Point)
{
	return (Point[0] >= 1 && Point[0] <= 25) && (Point[1] >= 1 && Point[1] <= 25);
}

double Dist(vector<int>& P1, vector<int>& P2)
{
	return sqrt((P1[0] - P2[0]) * (P1[0] - P2[0]) + (P1[1] - P2[1]) * (P1[1] - P2[1]));
}
bool Valid(vector<int>Point)
{
	if (ValidGrid(Point))
	{
		if (Arr[Point[0]][Point[1]] == 2)FoundPath = 1;
		return !Arr[Point[0]][Point[1]];
	}
	return 0;
}

void DrawPoint(int i, int j, int Color)
{
	if (!(~Color))Color = 4;
	glBegin(GL_POINTS);
	glColor3ubv(Colors[Color]);
	glVertex2i(i * 20 - 10, j * 20 - 10);
	glEnd();
}
void PrintGrid()
{
	glPointSize(20);
	for (int i = 1; i <= 25; i++)
	{
		for (int j = 1; j <= 25; j++)
		{
			if (!Arr[i][j])continue;
			DrawPoint(i, j, Arr[i][j]);
		}
	}
}

/* Start Algorithms(Please Create External Class For Algorithms) */

void DFS()
{

	if (!St.empty())
	{
		vector<int>Top = St.top();
		St.pop();
		if (Top[2] > 3)
		{
			if (!St.empty())
			{
				Arr[Top[0]][Top[1]] = 5; // Color As Visited
			}
		}
		else
		{
			Top[2]++;
			St.push(Top);
			vector<int>NewPoint = { Top[0] + DX[Top[2] - 1], Top[1] + DY[Top[2] - 1] , 0 };
			if (Valid(NewPoint))
			{
				Parent[NewPoint[0]][NewPoint[1]] = { Top[0] , Top[1] };
				Arr[NewPoint[0]][NewPoint[1]] = 3;
				St.push(NewPoint);
			}
			if (FoundPath)Parent[NewPoint[0]][NewPoint[1]] = { Top[0] , Top[1] };

		}
		Possible = 1;
	}
	else Possible = 2;

}

void BFS()
{
	if (!Q.empty())
	{
		vector<int>F = Q.front();
		Q.pop();
		for (int i = 0; i < 8; i++)
		{
			vector<int>NewPoint = { F[0] + DX[i], F[1] + DY[i] };
			if (Valid(NewPoint))
			{

				Q.push(NewPoint);
				Parent[NewPoint[0]][NewPoint[1]] = { F[0] , F[1] };
				Arr[NewPoint[0]][NewPoint[1]] = 3;
			}
			if (FoundPath)
			{
				Parent[NewPoint[0]][NewPoint[1]] = { F[0] , F[1] };
				break;
			}
		}
		Possible = 1;
	}
	else Possible = 2;
}

void A_Star()
{
	if (!ForA_Star.empty())
	{
		vector<int>WhoMin;
		int Min = 1e9;
		for (auto& X : ForA_Star)
		{
			if (Min > FScore[X[0]][X[1]])
			{
				Min = FScore[X[0]][X[1]];
				WhoMin = X;
			}
		}

		if (!Arr[WhoMin[0]][WhoMin[1]])Arr[WhoMin[0]][WhoMin[1]] = 3;
		ForA_Star.erase(WhoMin);
		for (int i = 0; i < 8; i++)
		{
			vector<int>NewPoint = { WhoMin[0] + DX[i] , WhoMin[1] + DY[i] };
			if (Valid(NewPoint))
			{
				double NewScore = GScore[WhoMin[0]][WhoMin[1]] + Dist(NewPoint, WhoMin);
				if (NewScore < GScore[NewPoint[0]][NewPoint[1]])
				{
					GScore[NewPoint[0]][NewPoint[1]] = NewScore;

					FScore[NewPoint[0]][NewPoint[1]] = NewScore + (abs(NewPoint[0] - EndPoint[0]) + abs(NewPoint[1] - EndPoint[1]));
					Parent[NewPoint[0]][NewPoint[1]] = { WhoMin[0] , WhoMin[1] };
					if (ForA_Star.find(NewPoint) == ForA_Star.end())
					{
						ForA_Star.insert(NewPoint);

					}
				}
			}
			if (FoundPath)
			{
				Parent[NewPoint[0]][NewPoint[1]] = { WhoMin[0] , WhoMin[1] };
				return;
			}
		}
		Possible = 1;
	}
	else Possible = 2;
}


/* End Algorithms */
void ResetGame()
{
	StartSearch = 0;
	Printed = 0;
	Possible = 0;
	memset(Arr, 0, sizeof Arr);
	Timer = 0;
	FoundPath = 0;
	NumberOfPoints = 0;
	Choice = 0;
	for (int i = 0; i < 30; i++)
	{
		for (int j = 0; j < 30; j++)GScore[i][j] = FScore[i][j] = 1e9;
	}
	for (auto& X : Parent)for (auto& X2 : X)X2.clear();

	St = stack<vector<int>>();
	Q = queue<vector<int>>();
	ForA_Star.clear();
	StartPoint.clear();
	EndPoint.clear();

}
void Draw()
{
	glClearColor(0.4, 0.7, 1, 0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();

	InitFirstSmallPoint();

	if (FoundPath)
	{
		if (!Printed)
		{
			cout << "-------- Path Found --------\n", Printed = 1;
		}

		Timer = 0;
		PrintPath(EndPoint[0], EndPoint[1]);
	}
	else Timer++;





	if (Timer == 100)
	{
		if (StartSearch && !FoundPath)
		{
			if (Choice == 1)DFS();
			else if (Choice == 2)BFS();
			else if (Choice == 3)A_Star();
		}
		Timer = 0;
	}



	//cout << Possible << " " << Printed << "\n";

	if (Possible == 2)
	{
		//cout << Possible << " " << Printed << "\n";
		Timer = 0;
		if (!Printed)
		{
			cout << "-------- Path Not Found --------\n", Printed = 1;
		}
	}

	PrintGrid();


	glutPostRedisplay();
	glutSwapBuffers();
	glFlush();
}

void GenerateRandomGrid()
{

	for (int i = 0; i < 30; i++)
	{
		for (int j = 0; j < 30; j++)if (Arr[i][j] == 4)Arr[i][j] = 0;
	}

	for (int i = 1; i <= 10; i++)
	{
		for (int j = 1; j <= 14; j++)
		{
			int RandX = rand() % 25 + 1;
			int RandY = rand() % 25 + 1;
			if (!Arr[RandX][RandY])Arr[RandX][RandY] = 4;
		}
	}
}



/* End General Print */


void OnReshape(int W, int H)
{

	glViewport(0, 0, W, H);
	gluPerspective(60, W / H, 1, 10);

}

void HandleMouse(int Button, int State, int X, int Y)
{


	//cout << "Choice : " << Choice << "\n";
	if (State == GLUT_DOWN)
	{
		if (Choice < 1 || Choice > 3)
		{
			cout << "Please Enter Choice !!!\n\n";
			GetChoices();
			return;
		}
	}
	if (Button == GLUT_LEFT_BUTTON && State == GLUT_DOWN && !StartSearch) {
		NumberOfPoints++;
		vector<int>RealPoint = GetPoint(X, 500 - Y);

		//cout << X << " , " << 500 - Y << " => " << RealPoint[0] << " " << RealPoint[1] << "\n\n";

		if (NumberOfPoints == 1)
		{
			StartPoint = RealPoint;
			RealPoint.push_back(0);
			Q.push(RealPoint);
			St.push(RealPoint);
			ForA_Star.insert({ StartPoint[0] , StartPoint[1] });
			Parent[StartPoint[0]][StartPoint[1]] = { StartPoint[0] , StartPoint[1] };

		}
		else if (NumberOfPoints == 2)
		{
			EndPoint = RealPoint;
			if (Choice == 3)
			{
				int By = abs(StartPoint[0] - EndPoint[0]) + abs(StartPoint[1] - EndPoint[1]);
				GScore[StartPoint[0]][StartPoint[1]] = 0;
				FScore[StartPoint[0]][StartPoint[1]] = By;
			}
		}

		if (!Arr[RealPoint[0]][RealPoint[1]])Arr[RealPoint[0]][RealPoint[1]] = NumberOfPoints <= 2 ? NumberOfPoints : 4;
	}
	else if (Button == GLUT_RIGHT_BUTTON && State == GLUT_DOWN && NumberOfPoints >= 2)StartSearch = 1;
}

void HandleKeyboard(unsigned char C, int X, int Y)
{
	if (C>='A' && C <= 'Z')C += 32;
	if (C == 'r')
	{
		GetChoices();
		ResetGame();
	}
	else if (C == 'x')
	{
		GenerateRandomGrid();
	}
	else if (C >= '1' && C <= '4')
	{
		if (C == '4')exit(0);
		if (C == '1')cout << "DFS ";
		else if (C == '2')cout << "BFS ";
		else cout << "A* ";
		cout << "Applied !!\n";

		Choice = C - '0';
	}
	else
	{
		cout << "Please Enter From Below !!!\n";
		GetChoices();
	}
}
int main(int argc, char** argv)
{

	cout << "*************** " << "Press R To Reset The Game ***************\n";
	cout << "*************** " << "Press X To Generate Random Grid ***************\n";

	srand(time(0));


	GetChoices();
	ResetGame();


	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);


	int X = glutCreateWindow("Algorithms Visualizer");
	Init();
	glutDisplayFunc(Draw);
	glutReshapeFunc(OnReshape);
	glutMouseFunc(HandleMouse);
	glutKeyboardFunc(HandleKeyboard);



	glutMainLoop();

	return 0;
}