#include <GL/freeglut.h>
#include <iostream>
#include <vector>
using namespace std;
int width = 500, height = 500;
int Type[30][30];
vector<vector<vector<int>>>Logical(30, vector<vector<int>>(30, vector<int>()));
bool AnsLogic[30][30];
bool Used[30][30];
vector<vector<int>>Lines;
bool Hold = 0;
vector<int>Operators = { 1 , 2 , 3 }; // AND OR XOR
vector<string>OperatorsNames = { "AND" , "OR" , "XOR" };

GLubyte Colors[][3] = {
	{}, // Empty => Index Based 1
	{0 , 0 ,0 }, // Black => Output
	{255 , 255 , 255}, // Wihte => Input
	{124 , 5 , 9}, // Dark Red => Light Off
	{255 , 0 , 0}, // Red => Light On
	{255 , 255 , 0}, // Yello => Color Line
};
bool GetAns(int Type, bool A, bool B)
{

	if (Type == 1)return (A & B);
	if (Type == 2)return (A | B);
	if (Type == 3)return (A ^ B);
	if (Type == 4)return !(A ^ B);
	return 1;
}


vector<int> GetFromArrayPos(int X, int Y)
{
	return { (X * 2 + 1) * 10 ,(Y * 2 + 1) * 10 };
}
vector<int> GetFormMousePosition(int X, int Y)
{
	return { X / 20 , Y / 20 };
}

bool GetState(int i, int j)
{
	if (!Logical[i][j].size())return 0;
	if (Logical[i][j][0] == i && Logical[i][j][1] == j)
	{
		//cout << "here : " << i << " " << j << " => " << AnsLogic[i][j]<<"\n";
		return AnsLogic[i][j];
	}
	return GetState(Logical[i][j][0], Logical[i][j][1]);
}

bool GetState(vector<int>& V)
{
	int Size = V.size();
	bool Ans = Size > 0;
	for (int i = 0; i < Size; i += 2)Ans &= GetState(V[i], V[i + 1]);

	return Ans;
}

void CheckForEvaluate()
{
	// Keep Outputs Up To Date


	for (int i = 1; i < 25; i += 4)
	{
		AnsLogic[8][i] = GetState(Logical[8][i]);
		//cout << 8 << " " << i << " => " << AnsLogic[8][i] << "\n";
	}
	//cout << "\n\n";

	int Old = -1;
	int Cnt = 0;
	for (int i = 1; i < 25; i += 4)
	{
		if (~Old)
		{
			int PutAns = (Old + i) / 2;
			AnsLogic[13][PutAns] = GetAns(Operators[Cnt++], AnsLogic[8][Old], AnsLogic[8][i]);
			//cout << 10 << " " << PutAns << " " << AnsLogic[10][PutAns] << "\n";
			Old = -1;
		}
		else Old = i;
	}
	//cout << "\n\n";

	for (int i = 1; i < 25; i += 4)
	{
		if (Logical[20][i].size())
		{
			AnsLogic[20][i] = AnsLogic[Logical[20][i][0]][Logical[20][i][1]];
			//cout << Logical[20][i][0] << " " << Logical[20][i][1]<<" "<< AnsLogic[Logical[20][i][0]][Logical[20][i][1]]<<" "<<AnsLogic[20][i] << " --- " << "\n";
		}
		Type[22][i] = AnsLogic[20][i] ? 4 : 3;

	}
	//cout << "\n";


}

void init()
{
	glViewport(0, 0, width, height);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();  //reset projection matrix values -  makes it identity matrix

	GLdouble aratio = GLdouble(width) / GLdouble(height);

	gluOrtho2D(0.0, width, height, 0.0);
	glMatrixMode(GL_MODELVIEW);  //load world view matrix
}
void Draw(void) //display function/render function
{
	glClearColor(0.32941, 0.65490, 1.0f, 1.0f);  // red, green, blue, alpha
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity(); // reset world view matrix 

	CheckForEvaluate();




	for (int i = 0; i < 30; i++)
	{
		for (int j = 0; j < 30; j++)
		{
			if (!Type[i][j])continue;
			vector<int>MinAns = GetFromArrayPos(i, j);
			glColor3ubv(Colors[Type[i][j]]);
			glPointSize(20);
			glBegin(GL_POINTS);
			glVertex2i(MinAns[0], MinAns[1]);
			glEnd();
		}
	}
	glColor3ub(255, 255, 255);
	int Y = 100;
	for (char i = 'A'; i <= 'E'; i++)
	{
		glRasterPos2f(15, Y);
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, i);
		Y += 80;
	}



	int Old = -1;
	int Cnt = 0;

	Y = 100;
	for (int i = 1; i < 25; i += 4)
	{
		if (~Old)
		{
			vector<int>RealPos = GetFromArrayPos(8, (Old + i) / 2);


			glColor3ub(0, 0, 255);
			glRecti(170, Y, 250, Y - 50);
			Y += 160;

			glColor3ub(255, 255, 255);
			int X = RealPos[0];
			for (char C : OperatorsNames[Cnt])
			{
				glRasterPos2f(X, RealPos[1] + 10);
				glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, C);
				X += 30;
			}
			Cnt++;
			Old = -1;
		}
		else
			Old = i;
	}




	for (auto& X : Lines)
	{
		if (X.size() != 4)continue;
		glColor3ubv(Colors[5]);
		glBegin(GL_LINES);
		glVertex2i(X[0], X[1]);
		glVertex2i(X[2], X[3]);
		glEnd();
	}

	glutPostRedisplay(); // for animation
	glutSwapBuffers(); // 
	glFlush();
}


void MouseHandler(int Button, int State, int X, int Y)
{

	vector<int>Cords = GetFormMousePosition(X, Y);
	if (Button == GLUT_LEFT_BUTTON && State == GLUT_DOWN) {


		bool ValidStep = 0;

		if (!Hold && Type[Cords[0]][Cords[1]] == 1)ValidStep = 1;
		else if (Hold && Type[Cords[0]][Cords[1]] == 2)ValidStep = 1;

		if (ValidStep)
		{
			if (Hold)
			{
				vector<int>Back = Lines.back();
				Lines.pop_back();
				Back.push_back(X);
				Back.push_back(Y);
				Lines.push_back(Back);


				vector<int>Old = GetFormMousePosition(Back[0], Back[1]);
				vector<int>New = GetFormMousePosition(Back[2], Back[3]);


				Logical[New[0]][New[1]].push_back(Old[0]);
				Logical[New[0]][New[1]].push_back(Old[1]);

				/*	cout << New[0] << " " << New[1] << " => ";
				for (int j = 0; j < Logical[New[0]][New[1]].size(); j+=2)
				{
					cout << Logical[New[0]][New[1]][j] << " " << Logical[New[0]][New[1]][j + 1] << " => " << GetState(Logical[New[0]][New[1]][j], Logical[New[0]][New[1]][j + 1]);
					cout << "\n";
				}
				cout << "\n\n";*/


			}
			else
			{
				//Used[Cords[0]][Cords[1]] = 1;

				Lines.push_back({ X , Y });
			}
			Hold ^= 1;
		}

	}
	else if (Button == GLUT_RIGHT_BUTTON && State == GLUT_DOWN) {
		for (int i = 4; i <= 20; i += 4)
		{
			if (Cords[0] == 2 && Cords[1] == i)
			{
				Type[2][i] = Type[2][i] == 4 ? 3 : 4;
				AnsLogic[4][i] ^= 1;
				break;
			}
		}
	}


}



int main(int argc, char** argv)
{

	memset(Type, 0, sizeof Type);
	memset(AnsLogic, 0, sizeof AnsLogic);
	memset(Used, 0, sizeof Used);




	// Draw States For Inputs
	for (int i = 4; i <= 20; i += 4)Type[2][i] = 4;

	// Draw Output For Inputs
	for (int i = 4; i <= 20; i += 4)
	{
		Type[4][i] = 1;
		AnsLogic[4][i] = 1;
		Logical[4][i].push_back(4);
		Logical[4][i].push_back(i);

	}


	// Draw Inputs Functions
	for (int i = 1; i < 25; i += 4)Type[8][i] = 2;

	// Draw Output Functions
	int Old = -1;
	for (int i = 1; i < 25; i += 4)
	{
		if (~Old)
		{
			Type[13][(Old + i) / 2] = 1;
			Old = -1;
		}
		else
			Old = i;
	}


	// Draw Input For Lights
	for (int i = 1; i < 25; i += 4)Type[20][i] = 2;

	// Draw Lights
	for (int i = 1; i < 25; i += 4)Type[22][i] = 3;



	glutInit(&argc, argv);  //initialize all flags in freeglut
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH); //GLUT_SINGLE
	glutInitWindowSize(width, height);
	glutInitWindowPosition(100, 50);
	int i = glutCreateWindow("Digital Board Visualizer");

	init();

	glutDisplayFunc(Draw);
	glutMouseFunc(MouseHandler);

	glutMainLoop();

	return 0;
}