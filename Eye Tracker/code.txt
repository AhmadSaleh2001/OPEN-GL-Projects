#include <GL/freeglut.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <math.h>
#include<iostream>
#include<vector>
#include<queue>
#include<stack>
#include<string>
#include<Windows.h>
using namespace std;
const double PI = 3.141592653589793238;
double X = 0, Y = 0;
GLubyte Colors[3][3] = {
	{255 , 0 , 0},
	{255 , 255 , 0},
	{0 , 0 , 0},
};
void Init()
{
	glClearColor(0.4, 0.7, 1, 0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glViewport(0, 0, 500, 500);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();


	gluOrtho2D(0, 500, 0, 500);

	glMatrixMode(GL_MODELVIEW);
	


}

void DrawCircle(int X, int Y, int R , int Color)
{
	
	glPointSize(5);
	glColor3ubv(Colors[Color]);

	for (int i = 0; i < 360; i++)
	{
		glBegin(GL_POINTS);
		double ToSetX = X + R * cos(i * PI / 180);
		double ToSetY = Y + R * sin(i * PI / 180);
		glVertex2i(ToSetX, ToSetY);
		glEnd();
	}
}

void DrawHalfCircle(int X, int Y, int R , int Color)
{

	glPointSize(5);
	glColor3ubv(Colors[Color]);


	
	//cout << X + R * cos(90) << " " << Y + R * sin(90.0) << "\n";
	

	for (int i = 180; i < 360; i++)
	{
		glBegin(GL_POINTS);
		double ToSetX = X + R * cos(i * PI / 180);
		double ToSetY = Y + R * sin(i * PI / 180);
		glVertex2i(ToSetX, ToSetY);
		glEnd();
	}
}



void Draw()
{
	glClearColor(0.4, 0.7, 1, 0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();


	DrawCircle(250, 250, 200 , 0); // Draw Face
	DrawCircle(150, 300, 50 , 0); // Draw Left Eye 
	DrawCircle(150 + X, 300 + Y, 20 , 2); // Draw Pupil In Left Eye 
	


	DrawCircle(350, 300, 50 , 0); // Draw Right Eye 
	DrawCircle(350 + X, 300 + Y, 20, 2); // Draw Pupil In Right Eye 

	DrawHalfCircle(250, 200, 100 , 1); // Draw Mouth



	glutPostRedisplay();
	glutSwapBuffers();
	glFlush();
}


void HandlePassiveMouse(int MX, int MY) // MX => MouseX , MY => MouseY
{


	double CurrX = MX;
	double CurrY = MY;
	CurrY = 500 - CurrY;

	CurrX -= 250;
	CurrY -= 250;

	CurrX/= 250.0;
	CurrY /= 250.0;

	X = CurrX * 25;
	Y = CurrY * 25;
	
}


void OnReshape(int W, int H)
{

	glViewport(0, 0, W, H);
	gluPerspective(60, W / H, 1, 10);

}



int main(int argc, char** argv)
{
	srand(time(0));
	


	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);


	int X = glutCreateWindow("Main Page");



	Init();
	glutDisplayFunc(Draw);
	glutReshapeFunc(OnReshape);
	glutPassiveMotionFunc(HandlePassiveMouse);
	glutMainLoop();

	return 0;
}